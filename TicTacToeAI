from copy import deepcopy
from random import choice

board = [[0,0,0],
         [0,0,0],
         [0,0,0]]

def check(board):
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2]:
            return board[i][0]
        if board[0][i] == board[1][i] == board[2][i]:
            return board[0][i]
    if board[0][0] == board[1][1] == board[2][2]:
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0]:
        return board[0][2]
    for i in range(3):
        for ii in range(3):
            if board[i][ii] == 0:
                return 0
    return 3

def display(board):
    for row in board:
        print(row)

def max_idx(array):
    idxs = [0]
    max_num = array[0]
    for i,num in enumerate(array[1:]):
        if num > max_num:
            max_num = num
            idxs = [i+1]
        elif num == max_num:
            idxs.append(i+1)
    return idxs

def CPU_move(board):
    allowed = []
    moves = []
    for i in range(3):
        for ii in range(3):
            if board[i][ii] == 0:
                allowed.append((i,ii))
    for y,x in allowed:
        copy1 = deepcopy(board)
        copy2 = deepcopy(allowed)
        copy1[y][x] = 2
        copy2.remove((y,x))
        moves.append(minimax(copy1,copy2,-1))
    return allowed[choice(max_idx(moves))]

def minimax(board,allowed,turn):
    state = check(board)
    if state == 1:
        return -1
    elif state == 2:
        return 1
    elif state == 3:
        return 0

    else:
        branch = []
        if turn == -1:
            for y,x in allowed:
                copy1 = deepcopy(board)
                copy2 = deepcopy(allowed)
                copy1[y][x] = 1
                copy2.remove((y,x))
                branch.append(minimax(copy1,copy2,turn*-1))
            return min(branch)
        elif turn == 1:
            for y,x in allowed:
                copy1 = deepcopy(board)
                copy2 = deepcopy(allowed)
                copy1[y][x] = 2
                copy2.remove((y,x))
                branch.append(minimax(copy1,copy2,turn*-1))
            return max(branch)

display(board)
playing = 0
while playing == 0:
    for player in range(1,3):
        if player == 1:
            while True:
                try:
                    move_y,move_x = input().split()
                    move_y,move_x = int(move_y),int(move_x)
                    if board[move_y][move_x] == 0:
                        break
                except: break
        if player == 2:
            move_y,move_x = CPU_move(board)
            print("-"*10)
        board[move_y][move_x] = player
        display(board)
        playing = check(board)
        if playing != 0:
            break
        
